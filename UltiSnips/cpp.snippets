# Copyright 2016, Dawid Kurek, <dawikur@gmail.com>

# Containers
snippet stv "vector"
std::vector<${1:${VISUAL:type}}> ${0}
endsnippet
# Idioms
snippet erm "erase"
${1:${VISUAL:container}}.erase(std::remove(std::begin($1), std::end($1), ${2:value}), std::end($1));${0}
endsnippet
# Modifying
snippet cpb "copy_backward"
std::copy_backward(std::begin(${1:${VISUAL:input}}), std::end($1),
                   std::end(${2:output}));${0}
endsnippet
snippet cpi "copy_if"
std::copy_if(std::begin(${1:${VISUAL:input}}), std::end($1),
             std::begin(${2:output}),
             [](${3:auto const value}) {
	${4}
});${0}
endsnippet
snippet cpn "copy_n"
std::copy_n(std::begin(${1:${VISUAL:input}}), ${2:count}, std::end(${3:output}));${0}
endsnippet
snippet cpy "copy"
std::copy(std::begin(${1:${VISUAL:input}}), std::end($1),
          std::begin(${2:output}));${0}
endsnippet
snippet fil "fill"
std::fill(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:value});${0}
endsnippet
snippet fln "fill_n"
std::fill_n(std::begin(${1:${VISUAL:container}}), ${2:count}, ${3:value});${0}
endsnippet
snippet gnn "generate_n"
std::generate_n(std::begin(${1:${VISUAL:container}}), ${2:count},
                [](${3:auto const value}) {
	${4}
});${0}
endsnippet
snippet gnr "generate"
std::generate(std::begin(${1:${VISUAL:container}}), std::end($1),
              [](${2:auto const value}) {
	${3}
});${0}
endsnippet
snippet ita "iota"
std::iota(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:initial_value});${0}
endsnippet
snippet mov "move"
std::move(std::begin(${1:${VISUAL:input}}), std::end($1), std::begin(${2:output}}));${0}
endsnippet
snippet mpb "move_backward"
std::move_backward(std::begin(${1:${VISUAL:input}}), std::end($1), std::end(${2:output}));${0}
endsnippet
snippet rci "replace_copy_if"
std::replace_copy_if(std::begin(${1:${VISUAL:input}}), std::end($1),
                     std::begin(${2:output}),
                     [](${3:auto const value}) {
	${4}
}, ${5:new_value});${0}
endsnippet
snippet rpc "replace_copy"
std::replace_copy(std::begin(${1:${VISUAL:input}}), std::end($1),
                  std::begin(${2:output}),
                  ${3:old_value}, ${4:new_value}});${0}
endsnippet
snippet rpi "replace_if"
std::replace_if(std::begin(${1:${VISUAL:container}}), std::end($1),
               [](${2:auto const element}) {
	${3}
}, ${4:new_value});${0}
endsnippet
snippet rpl "replace"
std::replace(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:old_value}, ${3:new_value});${0}
endsnippet
snippet swp "swap"
std::swap(${1:${VISUAL:lhs}}, ${2:rhs});${0}
endsnippet
snippet swr "swap_ranges"
std::swap_ranges(std::begin(${1:${VISUAL:container1}}), std::end($1),
                 std::begin(${2:container2}));${0}
endsnippet
snippet tfm "transform"
std::transform(std::begin(${1:${VISUAL:input}}), std::end($1),
               std::begin(${2:output}),
               [](${3:auto const value}) {
	${4}
});${0}
endsnippet
# Mutating
snippet nxp "next_permutation"
if (std::next_permutation(std::begin(${1:${VISUAL:container}}), std::end($1))) {
	${2}
}${0}
endsnippet
snippet prp "prev_permutation"
if (std::prev_permutation(std::begin(${1:${VISUAL:container}}), std::end($1))) {
	${2}
}${0}
endsnippet
snippet rtc "rotate_copy"
std::rotate_copy(std::begin(${1:${VISUAL:input}}), std::begin(${2:middle}), std::end($1),
                 std::begin(${2:output}));${0}
endsnippet
snippet rte "rotate"
std::rotate(std::begin(${1:${VISUAL:container}}), std::begin(${2:middle}), std::end($1));${0}
endsnippet
snippet rvc "reverse_copy"
std::reverse_copy(std::begin(${1:${VISUAL:input}}), std::end($1), std::begin(${2:output}));
endsnippet
snippet rvr "reverse"
std::reverse(std::begin(${1:${VISUAL:container}}), std::end($1));
endsnippet
snippet shf "random_shuffle"
std::random_shuffle(std::begin(${1:${VISUAL:container}}), std::end($1));
endsnippet
# Nonmodifying
snippet ajf "adjacent_find"
auto pos = std::adjacent_find(std::begin(${1:${VISUAL:container}}), std::end($1));
if (pos != std::end($1)) {
	${2}
}${0}
endsnippet
snippet alo "all_of"
if (std::all_of(std::begin(${1:${VISUAL:container}}), std::end($1),
                [](${2:auto const value}) {
                  ${3}
                })) {
	${4}
}${0}
endsnippet
snippet ano "any_of"
if (std::any_of(std::begin(${1:${VISUAL:container}}), std::end($1),
                [](${2:auto const value}) {
                  ${3}
                })) {
	${4}
}${0}
endsnippet
snippet cni "count_if"
auto n = std::count_if(std::begin(${1:${VISUAL:container}}), std::end($1),
                       [](${2:auto const value}) {
	${3}
});${0}
endsnippet
snippet cnt "count"
auto n = std::count(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:value});${0}
endsnippet
snippet eql "equal"
if (std::equal(std::begin(${1:${VISUAL:container1}}), std::end($1),
               std::begin(${2:container2}))) {
	${3}
}${0}
endsnippet
snippet ffo "find_first_of"
auto pos = std::find_first_of(std::begin(${1:${VISUAL:container1}}), std::end($1),
                              std::begin(${2:container2}), std::end($2));
if (pos != std::end($1)) {
	${3}
}${0}
endsnippet
snippet fin "find_if_not"
auto pos = std::find_if_not(std::begin(${1:${VISUAL:container}}), std::end($1),
                            [](${2:auto const value}) {
	${4}
});
if (pos != std::end($1)) {
	${5}
}${0}
endsnippet
snippet fnd "find"
auto pos = std::find(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:value});
if (pos != std::end($1)) {
	${3}
}${0}
endsnippet
snippet fne "find_end"
auto pos = std::find(std::end(std::begin(${1:${VISUAL:container}}), std::end($1),
                     std::begin(${2:container2}), std::end($2)));
if (pos != std::end($1)) {
	${3}
}${0}
endsnippet
snippet fni "find_if"
auto pos = std::find_if(std::begin(${1:${VISUAL:container}}), std::end($1),
                        [](${2:auto const value}) {
	${4}
});
if (pos != std::end($1)) {
	${5}
}${0}
endsnippet
snippet fre "for_each"
std::for_each(std::begin(${1:${VISUAL:container}}), std::end($1),
              [](${2:auto const value}) {
	${3}
});${0}
endsnippet
snippet ihp "is_heap"
if (std::is_heap(std::begin(${1:${VISUAL:container}}), std::end($1))) {
	$2
}${0}
endsnippet
snippet ihu "is_heap_until"
auto pos = std::is_heap_until(std::begin(${1:${VISUAL:container}}), std::end($1));
if (pos != std::end($1)) {
	$2
}${0}
endsnippet
snippet ipr "is_permutation"
if (std::is_permutation(std::begin(${1:${VISUAL:container1}}), std::end($1), std::begin(${2:container2}))) {
	${3}
}${0}
endsnippet
snippet ipt "is_partitioned"
if (std::is_partitioned(std::begin(${1:${VISUAL:container}}), std::end($1),
                        [](${2:auto const value}) {
                          ${3}
	                      })) {
	${4}
}${0}
endsnippet
snippet iss "is_sorted"
if (std::is_sorted(std::begin(${1:${VISUAL:container}}), std::end($1))) {
	$2
}${0}
endsnippet
snippet isu "is_sorted_until"
auto pos = std::is_sorted_until(std::begin(${1:${VISUAL:container}}), std::end($1));
if (pos != std::end($1)) {
	$2
}${0}
endsnippet
snippet lxc "lexigraphical_compare"
if (std::lexigraphical_compare(std::begin(${1:${VISUAL:container1}}), std::end($1),
                               std::begin(${2:container2}), std::end($2)) {
	${3}
}${0}
endsnippet
snippet mme "minmax_element"
auto minmax = std::minmax_element(std::begin(${1:${VISUAL:container}}),
                                  std::end($1));${0}
endsnippet
snippet mne "min_element"
auto pos = std::min_element(std::begin(${1:${VISUAL:container}}), std::end($1));${0}
endsnippet
snippet msm "mismatch"
auto values = std::mismatch(std::begin(${1:${VISUAL:container1}}), std::end($1), std::begin(${2:container2}));
if (values.first == std::end($1)) {
	${3}
} else {
	${4}
}${0}
endsnippet
snippet mxe "max_element"
auto pos = std::max_element(std::begin(${1:${VISUAL:container}}), std::end($1));${0}
endsnippet
snippet nno "none_of"
if (std::none_of(std::begin(${1:${VISUAL:container}}), std::end($1),
                 [](${2:auto const value}) {
                   ${3}
                 })) {
	${4}
}${0}
endsnippet
snippet ppt "partition_point"
auto pos = std::partition_point(std::begin(${1:${VISUAL:container}}), std::end($1),
                                [](${2:auto const value}) { ${3} });
if (pos != std::end($1)) {
	${4}
}${0}
endsnippet
snippet srh "search"
auto pos = std::search(std::begin(${1:${VISUAL:container1}}), std::end($1),
                       std::begin(${2:container2}), std::end($2));
if (pos != std::end($1)) {
	${3}
}${0}
endsnippet
snippet srn "search_n"
auto pos = std::search_n(std::begin(${1:${VISUAL:container}}), std::end($1),
                         ${2:count}, ${3:value}});
if (pos != std::end($1)) {
	${4}
}${0}
endsnippet
# Numeric
snippet acl "accumulate"
auto sum = std::accumulate(std::begin(${1:${VISUAL:container}}), std::end($1), 0,
                           [](auto const total, ${2:auto const value}) {
	${3}
});${0}
endsnippet
snippet acm "accumulate"
auto sum = std::accumulate(std::begin(${1:${VISUAL:container}}), std::end($1), 0);${0}
endsnippet
# Removing
snippet rmc "remove_copy"
std::remove_copy(std::begin(${1:${VISUAL:input}}), std::end($1),
                 std::begin(${2:output}), ${3:value});
endsnippet
snippet rmf "remove_copy_if"
std::remove_copy_if(std::begin(${1:${VISUAL:input}}), std::end($1),
                    std::begin(${2:output}),
                    [](${3:auto const value}) {
	${4}
});${0}
endsnippet
snippet rmi "remove_if"
auto pos = std::remove_if(std::begin(${1:${VISUAL:container}}), std::end($1),
                          [](${2:auto const value}) {
	${4}
});
if (pos != std::end($1)) {
	${5}
}${0}
endsnippet
snippet rmv "remove"
auto pos = std::remove(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:value});
if (pos != std::end($1)) {
	${3}
}${0}
endsnippet
snippet uqe "unique"
auto pos = std::unique(std::begin(${1:${VISUAL:container}}), std::end($1));${0}
endsnippet
# Sorted Ranges
snippet bns "binary_search"
auto pos = std::binary_search(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:value});
if (pos != std::end($1)) {
	${3}
}${0}
endsnippet
snippet eqr "equal_range"
auto bounds = std::equal_range(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:value});
endsnippet
snippet erl "equal_range"
auto bounds = std::equal_range(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:value},
                               [](${3:auto const lhs}, ${4:auto const rhs}) {
	${5}
});${0}
endsnippet
snippet inc "includes"
if (std::includes(std::begin(${1:${VISUAL:container1}}), std::end($1),
                  std::begin(${2:container2}), std::end($2))) {
	${3}
}${0}
endsnippet
snippet ipm "inplace_merge"
std::inplace_merge(std::begin(${1:${VISUAL:container}}), std::end(${2:middle}), std::end($1));
endsnippet
snippet lwb "lower_bound"
auto pos = std::lower_bound(std::begin(${1:${VISUAL:container}}), std::end($1), ${2:value});
if (pos != std::end($1)) {
	${3}
}${0}
endsnippet
snippet mrg "merge"
std::merge(std::begin(${1:${VISUAL:input1}}), std::end($1),
           std::begin(${2:input2}), std::end($2),
           std::begin(${3:output}));${0}
endsnippet
snippet ssd "set_symmetric_difference"
auto pos = std::set_symmetric_difference(std::begin(${1:${VISUAL:input1}}),
                                         std::end($1),
                                         std::begin(${2:input2}),
                                         std::end($2),
                                         std::begin(${3:output}));${0}
endsnippet
snippet std "set_difference"
auto pos = std::set_difference(std::begin(${1:${VISUAL:input1}}),
                               std::end($1),
                               std::begin(${2:input2}),
                               std::end($2),
                               std::begin(${3:output}));${0}
endsnippet
snippet stn "set_intersection"
auto pos = std::set_intersection(std::begin(${1:${VISUAL:input1}}),
                                 std::end($1),
                                 std::begin(${2:input2}),
                                 std::end($2),
                                 std::begin(${3:output}));${0}
endsnippet
snippet stu "set_union"
auto pos = std::set_union(std::begin(${1:${VISUAL:input1}}), std::end($1),
                          std::begin(${2:input2}), std::end($2),
                          std::begin(${3:output}));${0}
endsnippet
snippet ucp "unique_copy"
std::unique_copy(std::begin(${1:${VISUAL:container}}), std::end($1),
                 ${2:std::ostream_iterator<string>(std::cout, "\n")});${0}
endsnippet
snippet upb "upper_bound"
auto pos = std::upper_bound(std::begin(${1:${VISUAL:container}}),
                            std::end($1),
                            ${2:value});
if (pos != std::end($1)) {
	${3}
}${0}
endsnippet
# Sorting
snippet mkh "make_heap"
std::make_heap(std::begin(${1:${VISUAL:container}}), std::end($1));
endsnippet
snippet nth "nth_element"
std::nth_element(std::begin(${1:${VISUAL:container}}), std::end(${2:nth}),
                 std::end($1));${}
endsnippet
snippet phh "push_heap"
std::push_heap(std::begin(${1:${VISUAL:container}}), std::end($1));${0}
endsnippet
snippet pph "pop_heap"
std::pop_heap(std::begin(${1:${VISUAL:container}}), std::end($1));${0}
endsnippet
snippet psc "partial_sort_copy"
std::partial_sort_copy(std::begin(${1:${VISUAL:input}}), std::end($1),
                       std::begin(${2:output}), std::end($2));${0}
endsnippet
snippet pst "partial_sort"
std::partial_sort(std::begin(${1:${VISUAL:container}}), ${2:middle},
                  std::end($1));${0}
endsnippet
snippet ptc "partition_copy"
std::partition_copy(std::begin(${1:${VISUAL:input}}), std::end($1),
                    std::begin(${2:true_output}), std::end(${3:false_output}),
                    [] (${4:auto const value}){
	${5}
});${0}
endsnippet
snippet ptn "partition"
auto pos = std::partition(std::begin(${1:${VISUAL:container}}), std::end($1),
                          [](${2:auto const value}) {
	${3}
});
if (pos != std::end($1)) {
	${4}
}${0}
endsnippet
snippet spt "stable_partition"
auto pos = std::stable_partition(std::begin(${1:${VISUAL:container}}),
                                 std::end($1),
                                 [](${2:auto const value}) {
	${3}
});
if (pos != std::end($1)) {
	${4}
}${0}
endsnippet
snippet srt "sort"
std::sort(std::begin(${1:${VISUAL:container}}), std::end($1));${0}
endsnippet
snippet sth "sort_heap"
std::sort_heap(std::begin(${1:${VISUAL:container}}), std::end($1));${0}
endsnippet
snippet sts "stable_sort"
std::stable_sort(std::begin(${1:${VISUAL:container}}), std::end($1));${0}
endsnippet
# Streams
snippet oit "copy"
std::copy(std::begin(${1:${VISUAL:container}}), std::end($1),
          std::ostream_iterator<${2:string}>(std::cout, ${3:"\n"}));${0}
endsnippet
snippet sti "cin"
std::cin >> ${0}
endsnippet
snippet sto "cout"
std::cout << ${0}
endsnippet
# Strings
snippet ltr "string_trim_left"
${1:${VISUAL:string}}.erase(0, $1.find_first_not_of(" \t\n\r"));${0}
endsnippet
snippet lwr "string_lower"
std::transform(std::begin(${1:${VISUAL:input}}), std::end($1),
               std::begin(${2:output}),
               [](char const c) { return std::tolower(c); });${0}
endsnippet
snippet trm "string_trim_right"
${1:${VISUAL:string}}.erase($1.find_last_not_of(" \t\n\r") + 1);${0}
endsnippet
snippet upr "string_upper"
std::transform(std::begin(${1:${VISUAL:input}}), std::end($1),
               std::begin(${2:output}),
               [](char const c) { return std::toupper(c); });${0}
endsnippet
