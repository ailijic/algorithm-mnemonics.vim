# Copyright 2016, Dawid Kurek, <dawikur@gmail.com>

snippet acl "accumulate"
	auto sum = std::accumulate(std::begin(${1:container}), std::end($1), 0,
	                           [](int const total, ${2:auto const value}) {
		${3}
	});${0}
snippet acm "accumulate"
	auto sum = std::accumulate(std::begin(${1:container}), std::end($1), 0);${0}
snippet ajf "adjacent_find"
	auto pos = std::adjacent_find(std::begin(${1:container}), std::end($1));
	if (pos != std::end($1)) {
		${2}
	}${0}
snippet alo "all_of"
	if (std::all_of(std::begin(${1:container}), std::end($1),
	                [](${2:auto const value}) {
	                  ${3}
	                })) {
		${4}
	}${0}
snippet ano "any_of"
	if (std::any_of(std::begin(${1:container}), std::end($1),
	                [](${2:auto const value}) {
	                  ${3}
	                })) {
		${4}
	}${0}
snippet sti "cin"
	std::cin >> ${0}
snippet cpy "copy"
	std::copy(std::begin(${1:input}), std::end($1), std::begin(${2:output}));${0}
snippet oit "copy"
	std::copy(std::begin(${1:container}), std::end($1),
	          ${2:std::ostream_iterator<string>(std::cout, "\n")});${0}
snippet cpb "copy_backward"
	std::copy_backward(std::begin(${1:input}), std::end($1), std::end(${2:output}));${0}
snippet cpi "copy_if"
	std::copy_if(std::begin(${1:input}), std::end($1), std::begin(${2:output}),
	             [](${3:auto const value}) {
		${4}
	});${0}
snippet cpn "copy_n"
	std::copy_n(std::begin(${1:input}), ${2:count}, std::end(${3:output}));${0}
snippet cnt "count"
	auto count = std::count(std::begin(${1:container}), std::end($1), ${2:value});${0}
snippet cni "count_if"
	auto count = std::count_if(std::begin(${1:container}), std::end($1),
	                           [](${2:auto const value}) {
		${3}
	});${0}
snippet sto "cout"
	std::cout << ${0}
snippet eql "equal"
	if (std::equal(std::begin(${1:container1}), std::end($1), std::begin(${2:container2}))) {
		${3}
	}${0}
snippet fil "fill"
	std::fill(std::begin(${1:container}), std::end($1), ${2:value});${0}
snippet fln "fill_n"
	std::fill_n(std::begin(${1:container}), ${2:count}, ${3:value});${0}
snippet fnd "find"
	auto pos = std::find(std::begin(${1:container}), std::end($1), ${2:value});
	if (pos != std::end($1)) {
		${3}
	}${0}
snippet fne "find_end"
	auto pos = std::find(std::end(std::begin(${1:container}), std::end($1),
	                     std::begin(${2:container2}), std::end($2)));
	if (pos != std::end($1)) {
		${3}
	}${0}
snippet ffo "find_first_of"
	auto pos = std::find_first_of(std::begin(${1:container1}), std::end($1),
	                              std::begin(${2:container2}), std::end($2));
	if (pos != std::end($1)) {
		${3}
	}${0}
snippet fni "find_if"
	auto pos = std::find_if(std::begin(${1:container}), std::end($1),
	                        [](${2:auto const value}) {
		${4}
	});
	if (pos != std::end($1)) {
		${5}
	}${0}
snippet fin "find_if_not"
	auto pos = std::find_if_not(std::begin(${1:container}), std::end($1),
	                            [](${2:auto const value}) {
		${4}
	});
	if (pos != std::end($1)) {
		${5}
	}${0}
snippet fre "for_each"
	std::for_each(std::begin(${1:container}), std::end($1),
	              [](${2:auto const value}) {
		${3}
	});${0}
snippet gnr "generate"
	std::generate(std::begin(${1:container}), std::end($1),
	              [](${2:auto const value}) {
		${3}
	});${0}
snippet gnn "generate_n"
	std::generate_n(std::begin(${1:container}), ${2:count},
	                [](${3:auto const value}) {
		${4}
	});${0}
snippet trm "generate_n"
	${1:container}.erase($1.find_last_not_of(" \t\n\r") + 1);
snippet ita "iota"
	std::iota(std::begin(${1:container}), std::end($1), ${2:initial_value});${0}
snippet ihp "is_heap"
	if (std::is_heap(std::begin(${1:container}), std::end($1))) {
		$2
	}${0}
snippet ihu "is_heap_until"
	auto pos = std::is_heap_until(std::begin(${1:container}), std::end($1));
	if (pos != std::end($1)) {
		$2
	}${0}
snippet ipt "is_partitioned"
	if (std::is_partitioned(std::begin(${1:container}), std::end($1),
	                        [](${2:auto const value}) {
	                          ${3}
		                      })) {
		${4}
	}${0}
snippet ipr "is_permutation"
	if (std::is_permutation(std::begin(${1:container1}), std::end($1), std::begin(${2:container2}))) {
		${3}
	}${0}
snippet iss "is_sorted"
	if (std::is_sorted(std::begin(${1:container}), std::end($1))) {
		$2
	}${0}
snippet isu "is_sorted_until"
	auto pos = std::is_sorted_until(std::begin(${1:container}), std::end($1));
	if (pos != std::end($1)) {
		$2
	}${0}
snippet lxc "lexigraphical_compare"
	if (std::lexigraphical_compare(std::begin(${1:container1}), std::end($1),
	                               std::begin(${2:container2}), std::end($2)) {
		${3}
	}${0}
snippet mkh "make_heap"
	std::make_heap(std::begin(${1:container}), std::end($1));
snippet mxe "max_element"
	auto pos = std::max_element(std::begin(${1:container}), std::end($1));${0}
snippet mrg "merge"
	std::merge(std::begin(${1:input1}), std::end($1),
	           std::begin(${2:input2}), std::end($2),
	           std::begin(${3:output}));${0}
snippet mne "min_element"
	auto pos = std::min_element(std::begin(${1:container}), std::end($1));${0}
snippet mme "minmax_element"
	auto minmax = std::minmax_element(std::begin(${1:container}),
	                                  std::end($1));${0}
snippet msm "mismatch"
	auto values = std::mismatch(std::begin(${1:container1}), std::end($1), std::begin(${2:container2}));
	if (values.first == std::end($1)) {
		${3}
	} else {
		${4}
	}${0}
snippet mpb "move_backward"
	std::move_backward(std::begin(${1:input}), std::end($1), std::end(${2:output}));${0}
snippet nxp "next_permutation"
	if (std::next_permutation(std::begin(${1:container}), std::end($1))) {
		${2}
	}${0}
snippet nno "none_of"
	if (std::none_of(std::begin(${1:container}), std::end($1),
	                 [](${2:auto const value}) {
	                   ${3}
	                 })) {
		${4}
	}${0}
snippet nth "nth_element"
	std::nth_element(std::begin(${1:container}), std::end(${2:nth}), std::end($1));${0}
snippet pst "partial_sort"
	std::partial_sort(std::begin(${1:container}), std::begin(${2:nth}), std::end($1));${0}
snippet psc "partial_sort_copy"
	std::partial_sort_copy(std::begin(${1:input}), std::end($1),
	                       std::begin(${2:output}), std::end($2));${0}
snippet ptn "partition"
	auto pos = std::partition(std::begin(${1:container}), std::end($1),
	                          [](${2:auto const value}) {
		${3}
	});
	if (pos != std::end($1)) {
		${4}
	}${0}
snippet ptc "partition_copy"
	std::partition_copy(std::begin(${1:input}), std::end($1),
	                    std::begin(${2:true_output}), std::end(${3:false_output}),
	                    [] (${4:auto const value}){
		${5}
	});${0}
snippet ppt "partition_point"
	auto pos = std::partition_point(std::begin(${1:container}), std::end($1),
	                                [](${2:auto const value}) { ${3} });
	if (pos != std::end($1)) {
		${4}
	}${0}
snippet prp "prev_permutation"
	if (std::prev_permutation(std::begin(${1:container}), std::end($1))) {
		${2}
	}${0}
snippet phh "push_heap"
	std::push_heap(std::begin(${1:container}), std::end($1));
snippet shf "random_shuffle"
	std::random_shuffle(std::begin(${1:container}), std::end($1));
snippet rmv "remove"
	auto pos = std::remove(std::begin(${1:container}), std::end($1), ${2:value});
	if (pos != std::end($1)) {
		${3}
	}${0}
snippet erm "remove"
	${1:container}.erase(std::remove(std::begin($1), std::end($1), ${2:value}), std::end($1));${0}
snippet rmi "remove_if"
	auto pos = std::remove_if(std::begin(${1:container}), std::end($1),
	                          [](${2:auto const value}) {
		${4}
	});
	if (pos != std::end($1)) {
		${5}
	}${0}
snippet rmc "remove_copy"
	std::remove_copy(std::begin(${1:input}), std::end($1),
	                 std::begin(${2:output}), ${3:value});
snippet rmf "remove_copy_if"
	std::remove_copy_if(std::begin(${1:input}), std::end($1),
	                    std::begin(${2:output}),
	                    [](${3:auto const value}) {
		${4}
	});${0}
snippet rpl "replace"
	std::replace(std::begin(${1:container}), std::end($1), ${2:old_value}, ${3:new_value});${0}
snippet rpc "replace_copy"
	std::replace_copy(std::begin(${1:input}), std::end($1), std::begin(${2:output}), ${3:old_value}, ${4:new_value});${0}
snippet rci "replace_copy_if"
	std::replace_copy_if(std::begin(${1:input}), std::end($1),
	                     std::begin(${2:output}),
	                     [](${3:auto const value}) {
		${4}
	}, ${5:new_value});${0}
snippet rpi "replace_if"
	std::replace_if(std::begin(${1:container}), std::end($1), [](${2:auto const element}) {
		${3}
	}, ${4:new_value});${0}
snippet rvr "reverse"
	std::reverse(std::begin(${1:container}), std::end($1));
snippet rvc "reverse_copy"
	std::reverse_copy(std::begin(${1:input}), std::end($1), std::begin(${2:output}));
snippet rte "rotate"
	std::rotate(std::begin(${1:container}), std::begin(${2:nth}), std::end($1));${0}
snippet rtc "rotate_copy"
	std::rotate_copy(std::begin(${1:input}), std::begin(${2:nth}), std::end($1),
	                 std::begin(${2:output}));${0}
snippet srh "search"
	auto pos = std::search(std::begin(${1:container1}), std::end($1),
	                       std::begin(${2:container2}), std::end($2));
	if (pos != std::end($1)) {
		${3}
	}${0}
snippet srn "search_n"
	auto pos = std::search_n(std::begin(${1:container}), std::end($1), ${2:count}, ${3:value}});
	if (pos != std::end($1)) {
		${4}
	}${0}
snippet srt "sort"
	std::sort(std::begin(${1:container}), std::end($1));${0}
snippet sth "sort_heap"
	std::sort_heap(std::begin(${1:container}), std::end($1));
snippet spt "stable_partition"
	auto pos = std::stable_partition(std::begin(${1:container}), std::end($1),
	                                 [](${2:auto const value}) { ${3} });
	if (pos != std::end($1)) {
		${4}
	}${0}
snippet sts "stable_sort"
	std::stable_sort(std::begin(${1:container}), std::end($1));
snippet swr "swap_ranges"
	std::swap_ranges(std::begin(${1:container}), std::end($1), std::begin(${2:container2}));${0}
snippet tfm "transform"
	std::transform(std::begin(${1:input}), std::end($1),
	               std::begin(${2:output}),
	               [](${3:auto const value}) {
		${4}
	});${0}
snippet lwr "transform"
	std::transform(std::begin(${1:input}), std::end($1), std::begin(${2:output}),
	               [](${3:auto const value}) {
		${4}
	});${0}
snippet upr "transform"
	std::transform(std::begin(${1:input}), std::end($1), std::begin(${2:output}), [](${3:auto const element}) {
		return ${4:std::toupper(c)};
	});${0}
snippet ltr "transform"
	${1:container}.erase(0, $1.find_first_not_of(${2:" \t\n\r"}));${0}
snippet uqe "unique"
	auto pos = std::unique(std::begin(${1:container}), std::end($1));${0}
snippet ucp "unique_copy"
	std::unique_copy(std::begin(${1:container}), std::end($1),
	                 ${2:std::ostream_iterator<string>(std::cout, "\n")});${0}
snippet stv "vector"
	std::vector<${1:type}> ${0}
